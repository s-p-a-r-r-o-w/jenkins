//////////////////////////////////////////////////////////
// Jenkins pipeline for ZDT Deploy EAR WebSphere DMGR 
// Label Maintainer: Saravanan V     
//////////////////////////////////////////////////////////
def app_node_ips = [
    node_01: "hostname", 
    // node_02: "IP-Address"
]
pipeline {
    agent {
        label '<Agent Label Name>'
    }
    options {
        disableConcurrentBuilds()
    }
    environment {
        // Replace the values as per the environment
        sterling_dir = "/opt/IBM/OMS10"                             // Specify the STERLING Foundation directory
        ssh_user = "omsadmin"                                       // Specify the SSH username of APP Nodes
        dmgr_node = "hostname"                                    // Specify the IP of DMGR Node
        dmgr_user = "omsadmin"                                      // Specify the SSH username of DMGR Node
        dmgr_dir = "/opt/IBM/WebSphere/AppServer9/profiles/Dmgr01"  // Specify the WAS DMGR profile directory
        jython_ZDT_script = "/opt/IBM/script/deployEar_ZDT_V2.py"   // Specify the WAS wsadmin py script
        db_client_node = "hostname"                               // Specify the IP of DB Client connection Node
        dbscripts_dir = "/home/omsadmin/scripts/clear-heartbeat"    // Specify the DB stale scripts directory
        entity_automation_dir = "/opt/jenkins/entity_automation"
    }
    stages {
        stage('Setup Runtime') {
            steps {
                script {
                    app_servers = []
                    app_node_ips.each { key, value ->
                        app_servers.add(value)
                    }
                    try {
                        def app_servers_setup_parallelBranches = [:]
                            app_servers.each { node ->
                                app_servers_setup_parallelBranches[node] = {
                                    catchError {
                                        echo "Setting up runtime on appserver node: ${node}"
                                        sh """
                                            ssh ${ssh_user}@${node} "sh ${sterling_dir}/bin/setupRuntimeAPP.sh"
                                        """
                                    }
                                }
                            }
                        parallel app_servers_setup_parallelBranches
                    } catch (Exception e) {
                        error("Failed to Setup runtime App Nodes: ${e.message}")
                    }
                }
            }
        }
        stage('Handling Entity Changes'){
            steps {
                script {
                    try {
                        // Read the entity.flag file to determine if the script should be executed
                        sh """
                            scp ${ssh_user}@${app_node_ips.node_01}:${entity_automation_dir}/entity.flag  ${entity_automation_dir}/
                        """
                        def entityFlag = readFile("${entity_automation_dir}/entity.flag").trim()

                        if (entityFlag == 'true') {
                            echo "Entity flag is true. Proceeding with DB verification and entity handling."

                            // Run the dbverify.sh script on the remote app node
                            def result = sh(script: "ssh ${ssh_user}@${app_node_ips.node_01} 'sh ${sterling_dir}/bin/dbverify.sh'", returnStatus: true)
                            echo "DB verify script success with exit code ${result}"
                            if (result == 0) {
                                echo "DB verify script executed successfully."

                                // Run the entity handler Python script
                                sh """
                                    ssh ${ssh_user}@${app_node_ips.node_01} 'python3 ${entity_automation_dir}/entity_handler.py'
                                    scp ${ssh_user}@${app_node_ips.node_01}:${entity_automation_dir}/entity_dbcr.sql  ${entity_automation_dir}/
                                    scp ${ssh_user}@${app_node_ips.node_01}:${entity_automation_dir}/tables.diff  ${entity_automation_dir}/
                                """
                                // Read the content of the generated SQL file
                                def sqlScript = readFile("${entity_automation_dir}/entity_dbcr.sql")
                                echo "Below is the SQL script for the entity changes"
                                echo "${sqlScript}"

                                // Extract dynamic table names from  file
                                def tableNames = readFile("${entity_automation_dir}/tables.diff").trim().split('\n')

                                // Send email notification about entity changes
                                emailext (
                                    subject: "DEV OMS Sterling - Build Entity Changes Detected in ${env.JOB_NAME} - Build #${env.BUILD_NUMBER}",
                                    body: """
                                    <html>
                                    <body style="font-family: Arial, sans-serif; color: #333;">
                                        <h2 style="color: #3333ff;">Entity Changes Detected</h2>
                                        <p>Dear Team,</p>
                                        <p><b>Job Name:</b> ${env.JOB_NAME}</p>
                                        <p><b>Build Number:</b> ${env.BUILD_NUMBER}</p>
                                        <p>Entity changes have been detected in DEV OMS Build for the following tables:</p>
                                        <ul style="background-color: #f9f9f9; padding: 10px; border: 1px solid #ddd;">
                                            ${tableNames.collect { "<li>" + it + "</li>" }.join('')}
                                        </ul>
                                        <p>Below is the SQL script for the entity changes:</p>
                                        <pre style="background-color: #f0f0f0; padding: 10px; border: 1px solid #ddd;">
${sqlScript}
                                        </pre>
                                        <p style="color: #cc0000;"><b>NOTE : The SQL Entity DBCR script execution process must be completed manually before deployment.</b></p>
                                        <br>
                                        <p>Best Regards,</p>
                                        <p>DevOps Team - Jenkins</p>
                                    </body>
                                    </html>
                                    """,
                                    mimeType: 'text/html',
                                    to: "<email Ids >"
                                )
                            } else {
                                error "DB verify script failed with exit code ${result}."
                            }
                        } else {
                            echo "No Entity Changes on this Deployment"
                        }   
                    } catch (Exception e) {
                        error("Failed on Handling Entity Changes: ${e.message}")
                    }
                }
            }
        }
        stage('EAR Deployment') {
            parallel {
                stage('ZDT Deploy EAR') {
                    steps {
                        script {
                            try {
                                sh """
                                    ssh ${dmgr_user}@${dmgr_node} "sh ${dmgr_dir}/bin/wsadmin.sh -conntype SOAP -user configadmin -password configadmin -lang jython -f ${jython_ZDT_script}"
                                """
                            } catch (Exception e) {
                                error("Failed to execute ZDT Deploy: ${e.message}")
                            }
                        }
                    }
                }
                stage('DB Handler') {
                    steps {
                        script {
                            try {
                                sh """
                                    ssh ${ssh_user}@${db_client_node} "sh ${dbscripts_dir}/clear-db-stales-APP.sh"
                                """
                            } catch (Exception e) {
                                error("Failed to Clear DB stale entries : ${e.message}")
                            }
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            echo 'Executing cleanup stage: Killing clear-db-stales-APP.sh processes.'
            // Run the script to kill the process
            script {
                try {
                    sh """
                        ssh ${ssh_user}@${db_client_node} "sh ${dbscripts_dir}/post-jenkins.sh"
                    """
                } catch (Exception e) {
                    error("Failed to kill clear-db-stales-APP.sh processes  : ${e.message}")
                }
            }
        }
    }
}
